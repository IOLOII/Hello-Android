plugins {
    id 'com.android.application'
//    首先第一行应用了一个插件，一般有两种值可选：com.android.application表示这是一个应用程序模块，com.android.library表示这是一个库模块。
//     二者最大的区别在于，应用程序模块是可以直接运行的，库模块只能作为代码库依附于别的应用程序模块来运行。
    id 'kotlin-android'
//    接下来的两行应用了kotlin-android和kotlin-android-extensions这两个插件。
//    如果你想要使用Kotlin来开发Android项目，那么第一个插件就是必须应用的。而第二个插件帮助我们实现了一些非常好用的Kotlin扩展功能，
}

android {
//    compileSdkVersion用于指定项目的编译版本，这里指定成29表示使用Android 10.0系统的SDK编译。
    compileSdkVersion 30
//    buildToolsVersion用于指定项目构建工具的版本，目前最新的版本就是29.0.2，如果有更新的版本时，Android Studio会进行提示
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.example.helloworld"
        minSdkVersion 30
        targetSdkVersion 30
//        versionCode用于指定项目的版本号，versionName用于指定项目的版本名。
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner用于在当前项目中启用JUnit测试，你可以为当前项目编写测试用例，以保证功能的正确性和稳定性。
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

//    buildTypes闭包中用于指定生成安装文件的相关配置，通常只会有两个子闭包：一个是debug，一个是release。
    buildTypes {
        release {
//            minifyEnabled用于指定是否对项目的代码进行混淆，true表示混淆，false表示不混淆。
//            proguardFiles用于指定混淆时使用的规则文件，
//              这里指定了两个文件：第一个proguard-android-optimize.txt是在<Android SDK>/tools/proguard目录下的，里面是所有项目通用的混淆规则；
//                                 第二个proguard-rules.pro是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则。
//            需要注意的是，通过Android Studio直接运行项目生成的都是测试版安装文件
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
//        debug闭包是可以忽略不写的
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

//指定当前项目所有的依赖关系
dependencies {
//    implementation fileTree就是一个本地依赖声明，它表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径中。
//    而implementation则是远程依赖声明，
//    androidx.appcompat:appcompat:1.1.0就是一个标准的远程依赖库格式，
//        其中androidx.appcompat是域名部分，用于和其他公司的库做区分；
//        appcompat是工程名部分，用于和同一个公司中不同的库工程做区分；
//        1.1.0是版本号，用于和同一个库不同的版本做区分。
//        加上这句声明后，Gradle在构建项目时会首先检查一下本地是否已经有这个库的缓存，如果没有的话则会自动联网下载，然后再添加到项目的构建路径中。
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
//   ERROR: is greater than this module's compileSdkVersion (android-30) 解决方法  降级androidx.appcompat:appcompat
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}